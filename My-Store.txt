/********************************************************************************************************/
/*   My_Store.SQL                                                                                       */
/*                                                                                                      */
/*  This script contains all the DDL and DML needed to create the schema associated with the course	*/
/*  entitled "Oracle SQL Fundaments - Pass the Test, But More Importantly, Excel at Your Job".		*/
/*													*/
/********************************************************************************************************/

/* We start by connecting as SYSTEM and creating our new user/database					*/
/* We begin by dropping the user-schema just in case this script is run multiple times.			*/
DROP USER My_Store CASCADE;
COMMIT;

/* Create the user/schema.  Note, Oracle does not distinguish but will allow a create schema command.	*/
CREATE USER My_Store IDENTIFIED BY My_Store_Password;
COMMIT;

/* Grant the My_Store user ability to connect to the schema and create database items.			*/
GRANT connect, resource TO My_Store;
COMMIT;

/* Connect as My_Store											*/
CONNECT My_Store/My_Store_Password;

/* Start by creating the base tables:  Shipping_Boxes, Address_Types, States_Provinces, and Countries.	*/
CREATE TABLE Shipping_Boxes (
	Shipping_Box_ID	 	INTEGER CONSTRAINT shipping_boxes_pk PRIMARY KEY,
	Box_Length	 	INTEGER NOT NULL,
	Box_Width	 	INTEGER NOT NULL,
	Shipping_Rate	 	NUMERIC(5,2) DEFAULT 0.00);

CREATE TABLE Address_Types (
	Address_Type	 	VARCHAR(20) CONSTRAINT address_types_pk PRIMARY KEY);

CREATE TABLE Countries (
	Country		 	VARCHAR(20) CONSTRAINT countries_pk PRIMARY KEY);

CREATE TABLE States_Provinces (
	State_Province	 	VARCHAR(20),
	Country		 	VARCHAR(20),
	CONSTRAINT 	states_provinces_pk 	PRIMARY KEY (State_Province,Country),
	CONSTRAINT 	countries_states_provinces_fk 	FOREIGN KEY (Country) 
			REFERENCES Countries(Country));
COMMIT;

/* Time to create some of the entity tables.								*/
CREATE TABLE Customers (
	Customer_ID	 	INTEGER CONSTRAINT customers_pk PRIMARY KEY,
	First_name	 	VARCHAR(50) NOT NULL,
	Last_name	 	VARCHAR(100) NOT NULL,
	Email		 	VARCHAR(45),
	Telephone	 	VARCHAR(45));

CREATE TABLE Customer_Addresses (
	Customer_ID	 	INTEGER,
	Address_ID	 	INTEGER,
	Address_Type	 	VARCHAR(20) NOT NULL,    /* Note:  FK does not infer NOT NULL		*/
	Street_Address1	 	VARCHAR(90),
	Street_Address2	 	VARCHAR(90),
	City		 	VARCHAR(45),
	Postal_Code	 	VARCHAR(20),
	Country		 	VARCHAR(20),
	State_Province	 	VARCHAR(20));
ALTER TABLE Customer_Addresses
	ADD CONSTRAINT 	customer_addresses_pk 	PRIMARY KEY (Customer_ID, Address_ID);
/* Note:  constraint name modified to support 30 character max length limitation			*/
ALTER TABLE Customer_Addresses
	ADD CONSTRAINT 	address_types_cust_add_fk 	FOREIGN KEY (address_type) 
			REFERENCES Address_types(address_type);
ALTER TABLE Customer_Addresses
	ADD CONSTRAINT  states_provinces_cust_addr_fk 	FOREIGN KEY (state_province, country) 
			REFERENCES States_Provinces(state_province, country);
COMMIT;

CREATE TABLE Orders (
	Order_ID  	 	INTEGER,
	Order_Date  	 	DATE DEFAULT SYSDATE,
	Customer_ID 	 	INTEGER);
ALTER TABLE Orders  	ADD CONSTRAINT  orders_pk 	PRIMARY KEY (ORDER_ID);
ALTER TABLE Orders  	ADD CONSTRAINT  customers_orders_fk 
	FOREIGN KEY (customer_id)	REFERENCES CUSTOMERS(CUSTOMER_ID);
COMMIT;

CREATE TABLE Products (
	Product_ID 		INTEGER CONSTRAINT products_pk PRIMARY KEY,
	Product_Desc	 	VARCHAR(200),
	Product_Name	 	VARCHAR(45),
	Unit_Price	 	NUMERIC(5,2) DEFAULT 0.0,
	Quantity_On_Hand 	INTEGER DEFAULT 0,
	Product_Length	 	INTEGER,
	Product_Width	 	INTEGER);

CREATE TABLE Order_LineItems (
	Order_ID	 	INTEGER,
	LineItem_ID	 	INTEGER,
	Product_ID	 	INTEGER CONSTRAINT Products_Order_LineItems_fk REFERENCES Products(Product_ID),
	Order_Quantity	 	INTEGER DEFAULT 1,
	Extended_Price	 	NUMERIC(5,2),
	CONSTRAINT 	order_lineitems_pk  	PRIMARY KEY (ORDER_ID, LINEITEM_ID));
COMMIT;

CREATE TABLE Employees (
	Employee_ID	 	INTEGER CONSTRAINT employees_pk PRIMARY KEY,
	Manager_ID	 	INTEGER,
	First_Name	 	VARCHAR(25) NOT NULL,
	Last_Name	 	VARCHAR(50) NOT NULL);
ALTER TABLE Employees
	ADD  CONSTRAINT  employees_employees_fk FOREIGN KEY (Manager_ID) REFERENCES Employees(Employee_ID);

CREATE TABLE Shipments (
	Shipment_ID	 	INTEGER CONSTRAINT shipments_pk PRIMARY KEY,
	Order_ID	 	INTEGER,
	Customer_ID	 	INTEGER,
	Address_ID	 	INTEGER,
	Shipment_Type	 	VARCHAR(10) DEFAULT 'Full' CONSTRAINT valid_shipment_type CHECK (Shipment_Type IN ('Full','Partial')),
	CONSTRAINT shipment_customer_addresses_fk  FOREIGN KEY (Customer_ID, Address_ID) 
		REFERENCES Customer_Addresses(Customer_ID, Address_ID),
	CONSTRAINT shipment_order_fk FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID));
COMMIT;

CREATE TABLE Shipment_LineItems (
	Shipment_ID	 	INTEGER,
	Order_ID	 	INTEGER,
	Order_LineItem	 	INTEGER,
	Shipped_By	 	INTEGER CONSTRAINT shipment_lines_empl_fk REFERENCES Employees(Employee_ID),
	Shipping_Box_ID	 	INTEGER CONSTRAINT shipment_lines_box_fk REFERENCES Shipping_Boxes(Shipping_Box_ID),
	Ship_Date	 	Date DEFAULT SYSDATE,
	CONSTRAINT shipment_lineitems_pk PRIMARY KEY (Shipment_ID, Order_ID, Order_LineItem));

COMMIT;

Create Sequence Customer_ID_Sequence
	Start With		1
	Increment By 		1
	NoCache
	NoCycle;
COMMIT;

Create or Replace Trigger Before_Insert_Customer
	Before Insert on Customers
	For Each Row
   
  	Declare
    		My_ID Integer;

	Begin
		
    		select Customer_ID_Sequence.Nextval
    		into   My_ID
    		from   dual;

    		:new.customer_ID := My_ID;  

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Customer ID value.  Please contact system DBA.'); 
    
	End;
/
Commit;

Create or Replace Trigger Before_Insert_Cust_Add
	Before Insert on Customer_Addresses
	For Each Row

	Declare 
		My_ID	Integer;

	Begin

		select	nvl(max(address_id)+1,1)
		into	My_ID		
		from	customer_addresses
		where	customer_id = :new.customer_id;

		:new.Address_ID := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Address ID value.  Please contact system DBA.'); 
	End;
/
Commit;

Create Sequence Employee_ID_Sequence
	Start With 	1
	Increment By 	1
	NoCache
	NoCycle;
COMMIT;

Create or Replace Trigger Before_Insert_Employee
	Before Insert on Employees
	For Each Row
   
  	Declare
    		My_ID Integer;

	Begin
		
    		select Employee_ID_Sequence.Nextval
    		into   My_ID
    		from   dual;

    		:new.employee_ID := My_ID;  

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Employee ID value.  Please contact system DBA.'); 
    
	End;
/
Commit;

Create Sequence Order_ID_Sequence
	Start With 	1
	Increment By  	1
	NoCache
	NoCycle;
Commit;

Create or Replace Trigger Before_Insert_Order
	Before Insert on Orders
	For Each Row

	Declare	
		My_ID	Integer;

	Begin

		select 	Order_ID_Sequence.NextVal
		into	My_ID
		from	Dual;

		:new.order_id := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Order ID value.  Please contact system DBA.'); 
	End;
/
commit;

Create or Replace Trigger Before_Insert_Order_LineItems
	Before Insert on Order_LineItems
	For Each Row

	Declare
		My_ID 	Integer;

	Begin

		select 	nvl(max(lineitem_id)+1,1)
		into 	My_ID
		from 	order_lineitems
		where 	order_id = :new.order_id;

		:new.lineitem_id := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Order LineItem ID value.  Please contact system DBA.'); 
	End;
/
commit;

Create Sequence Product_ID_Sequence
	Start With 	1
	Increment By 	1
	NoCache
	NoCycle;
commit;

Create or Replace Trigger Before_Insert_Product
	Before Insert on Products
	For Each Row

	Declare
		My_ID 	Integer;

	Begin

		select 	Product_ID_Sequence.NextVal
		into 	My_ID
		from 	Dual;

		:new.Product_ID := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Product ID value.  Please contact system DBA.'); 
	End;
/
COMMIT;

Create Sequence Ship_Box_ID_Sequence
	Start With 	1
	Increment By 	1
	NoCache
	NoCycle;
Commit;

Create or Replace Trigger Before_Insert_Ship_Box
	Before Insert on Shipping_Boxes
	For Each Row

	Declare
		My_ID 	Integer;

	Begin

		select 	Ship_Box_ID_Sequence.NextVal
		into 	My_ID
		from 	Dual;

		:new.Shipping_Box_ID := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Shipping Box ID value.  Please contact system DBA.'); 
	End;
/
COMMIT;

Create Sequence Shipment_ID_Sequence
	Start With 	1
	Increment By 	1
	NoCache
	NoCycle;
COMMIT;

Create or Replace Trigger Before_Insert_Shipment
	Before Insert on Shipments
	For Each Row

	Declare
		My_ID 	Integer;

	Begin

		select 	Shipment_ID_Sequence.NextVal
		into 	My_ID
		from 	Dual;

		:new.Shipment_ID := My_ID;

		Exception
			When Others Then
				raise_application_error (-20001,'Problem getting next Shipment ID value.  Please contact system DBA.'); 
	End;
/
COMMIT;
